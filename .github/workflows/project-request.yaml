name: Project Request
on:
  issues:
    types: [opened, edited]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  process-project-request:
    if: contains(github.event.issue.title, 'Project Request:')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Parse issue body
        id: parse-issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body;
            const issueAuthorId = context.payload.issue.user.login;

            // First remove HTML comments from the issue body
            const bodyWithoutComments = issueBody.replace(/<!--[\s\S]*?-->/g, '');

            // Extract Project Information
            // Project name
            const projectNameMatch = bodyWithoutComments.match(/- Project name:([^\n]+)/i);
            const projectName = projectNameMatch ? projectNameMatch[1].trim() : null;
            
            // Github URL
            const githubUrlMatch = bodyWithoutComments.match(/- Github URL:([^\n]+)/i);
            const githubUrl = githubUrlMatch ? githubUrlMatch[1].trim() : null;
            
            // Homepage URL
            const homepageUrlMatch = bodyWithoutComments.match(/- Homepage URL:([^\n]+)/i);
            const homepageUrl = homepageUrlMatch ? homepageUrlMatch[1].trim() : null;
            
            // Logo URL
            const logoUrlMatch = bodyWithoutComments.match(/- Logo URL:([^\n]+)/i);
            const logoUrl = logoUrlMatch ? logoUrlMatch[1].trim() : null;
            
            // Logo Name (optional)
            const logoNameMatch = bodyWithoutComments.match(/- Logo Name:([^\n]+)/i);
            const logoName = logoNameMatch ? logoNameMatch[1].trim() : null;

            // Extract Category - Find the first checked box with [x] and its parent category
            let category = null;
            const lines = bodyWithoutComments.split('\n');
            let parentCategory = null;
            
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i].trim();
              
              // Check if this is a main category line
              if (line.startsWith('- ') && !line.includes('[')) {
                parentCategory = line.substring(2).trim();
              }
              
              // Check if this is a checked subcategory
              if (line.match(/- \[x\] (.+)/)) {
                const subcategory = line.match(/- \[x\] (.+)/)[1].trim();
                if (parentCategory) {
                  category = `${parentCategory}/${subcategory}`;
                  break;
                } else {
                  category = subcategory;
                  break;
                }
              }
            }

            // Set outputs
            core.setOutput('repo-url', githubUrl);
            core.setOutput('project-name', projectName);
            core.setOutput('category', category);
            core.setOutput('logo-url', logoUrl);
            core.setOutput('logo-name', logoName);
            core.setOutput('homepage-url', homepageUrl);
            core.setOutput("author-id", issueAuthorId);

            // Log the extracted information
            console.log(`Github URL: ${githubUrl}`);
            console.log(`Project Name: ${projectName}`);
            console.log(`Homepage URL: ${homepageUrl}`);
            console.log(`Logo URL: ${logoUrl}`);
            console.log(`Logo Name: ${logoName}`);
            console.log(`Category: ${category}`);
            console.log(`Author ID: ${issueAuthorId}`);

            // Check if we have all required information
            if (!githubUrl || !projectName || !category || !logoUrl || !homepageUrl) {
              core.setFailed('Missing required information in the issue');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '❌ Could not process this request. Please make sure you have provided the GitHub repo URL, project name, and selected a category.'
              });
              return false;
            }

            return true;

      - name: Create branch
        if: steps.parse-issue.outputs.result == 'true'
        run: |
          git config --global user.name "InftyAI-Agent"
          git config --global user.email "143625840+InftyAI-Agent@users.noreply.github.com"

          BRANCH_NAME="add-project-issue-${{ github.event.issue.number }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Run project_request.py script
        run: |
          CMD="python project_request.py \
            --category \"${{ steps.parse-issue.outputs.category }}\" \
            --repo_url \"${{ steps.parse-issue.outputs.repo-url }}\" \
            --name \"${{ steps.parse-issue.outputs.project-name }}\" \
            --logo_url \"${{ steps.parse-issue.outputs.logo-url }}\" \
            --homepage_url \"${{ steps.parse-issue.outputs.homepage-url }}\""
          
          if [ -n "${{ steps.parse-issue.outputs.logo-name }}" ]; then
            CMD="$CMD --logo_name \"${{ steps.parse-issue.outputs.logo-name }}\""
          fi
          
          eval $CMD

      - name: Commit changes
        env:
          ISSUE_AUTHOR: ${{ steps.parse-issue.outputs.author-id }}
        run: |
          git add .
          git commit -m "Add ${{ steps.parse-issue.outputs.repo-url }} to ${{ steps.parse-issue.outputs.category }} category

          Co-authored-by: $ISSUE_AUTHOR <$ISSUE_AUTHOR@users.noreply.github.com>"

          # 使用默认的GITHUB_TOKEN推送更改
          git push --set-upstream origin $BRANCH_NAME


      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issueNumber = context.issue.number;
            const branchName = process.env.BRANCH_NAME;

            const repoUrl = '${{ steps.parse-issue.outputs.repo-url }}';
            const category = '${{ steps.parse-issue.outputs.category }}';

            // Get the repository name from the URL
            const repoName = repoUrl.split('/').pop();

            // Get the user who created the issue
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });
            const issueAuthor = issue.data.user.login;

            // Create the PR
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: `Add ${repoName} to ${category}`,
              body: `fixes #${issueNumber},
              
            Co-authored-by: @${issueAuthor}`,
              head: branchName,
              base: 'main'
            });

            // Add comment to the issue
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner,
              repo,
              body: `✅ Pull Request created: #${pr.data.number}`
            });
